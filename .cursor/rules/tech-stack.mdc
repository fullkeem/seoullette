---
description: Tech Stack
globs: 
alwaysApply: false
---
# 서울렛 기술 스택 (Tech Stack)

## 프론트엔드 관련 기술 스택

### 🎯 핵심 기술
- **언어**: TypeScript 5.0+
- **프레임워크**: Next.js 15+ (App Router)
- **렌더링**: 클라이언트 사이드 렌더링 (SPA)

### 🎨 스타일링 선택: Tailwind CSS

#### 선택 근거
프로젝트 규모(단순한 룰렛 게임)를 고려했을 때 **Tailwind CSS**를 선택하는 것이 최적입니다.

**장점**:
- **빠른 프로토타이핑**: utility-first 접근으로 빠른 개발 가능
- **번들 크기 최적화**: 사용하지 않는 CSS 자동 제거 (PurgeCSS)
- **룰렛 애니메이션 지원**: 강력한 CSS 애니메이션 유틸리티 제공
  - `animate-spin`: 룰렛 회전 애니메이션
  - `transition-transform`: 부드러운 변환 효과
  - `duration-*`, `ease-*`: 세밀한 타이밍 제어
- **반응형 디자인**: 모바일-퍼스트 반응형 유틸리티
- **접근성**: `motion-safe`, `motion-reduce` 유틸리티로 사용자 접근성 고려

**Context7 검증 결과**:
- Tailwind CSS 코드 스니펫: 2026개 (풍부한 예제)
- 신뢰도 점수: 8/10 (높은 신뢰성)
- 애니메이션 지원: 완벽한 CSS 애니메이션 유틸리티 제공

### 🔧 개발 도구
- **린터**: ESLint (extends: next/core-web-vitals)
- **포매터**: Prettier + prettier-plugin-tailwindcss
- **타입 체크**: TypeScript strict mode

### 📦 의존성 관리
- **패키지 매니저**: pnpm
- **번들러**: Next.js 내장 Webpack + Turbopack

### 🎭 애니메이션 구현
Tailwind CSS 내장 애니메이션 유틸리티 활용:
```css
/* 룰렛 회전 애니메이션 */
.roulette-spin {
  @apply transition-transform duration-[3000ms] ease-out;
}

/* 결과 강조 효과 */
.result-highlight {
  @apply animate-pulse motion-safe:animate-bounce;
}

/* 반응형 호버 효과 */
.spin-button {
  @apply transition-all duration-200 ease-in-out
         hover:scale-105 hover:shadow-lg
         motion-reduce:transition-none motion-reduce:hover:transform-none;
}
```

### 📱 반응형 디자인
Tailwind CSS 반응형 유틸리티 활용:
- **모바일**: 기본 스타일 (320px+)
- **태블릿**: `md:` prefix (768px+)
- **데스크톱**: `lg:` prefix (1024px+)

### 💾 데이터 저장
- **로컬 스토리지**: 브라우저 Web Storage API
- **타입 안전성**: TypeScript interface로 데이터 구조 정의

### 🌐 배포 환경
- **정적 배포**: Next.js `output: 'export'` 설정
- **호환 플랫폼**: Vercel, Netlify, GitHub Pages

### 📈 성능 최적화
- **Code Splitting**: Next.js 자동 코드 분할
- **CSS 최적화**: Tailwind CSS PurgeCSS
- **이미지 최적화**: Next.js Image 컴포넌트 (필요시)

참고 파일: [prd.mdc](mdc:prd.mdc)

